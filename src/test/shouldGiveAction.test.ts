import { shouldGiveAction } from "../utils";
import { expect, test, describe } from "vitest";
describe("shouldGiveAction", () => {
	test("Should calculate actions correctly for 3 players", () => {
		const players = 3;
		let dealer = 0;
		let actions = 0;
		expect(shouldGiveAction(dealer, actions, players, 0)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 1)).toBe(true);
		expect(shouldGiveAction(dealer, actions, players, 2)).toBe(false);
		actions = 1;
		expect(shouldGiveAction(dealer, actions, players, 0)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 1)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 2)).toBe(true);
		actions = 2;
		expect(shouldGiveAction(dealer, actions, players, 0)).toBe(true);
		expect(shouldGiveAction(dealer, actions, players, 1)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 2)).toBe(false);

		dealer = 1;
		actions = 0;
		expect(shouldGiveAction(dealer, actions, players, 0)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 1)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 2)).toBe(true);
		actions = 1;
		expect(shouldGiveAction(dealer, actions, players, 0)).toBe(true);
		expect(shouldGiveAction(dealer, actions, players, 1)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 2)).toBe(false);
		actions = 2;
		expect(shouldGiveAction(dealer, actions, players, 0)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 1)).toBe(true);
		expect(shouldGiveAction(dealer, actions, players, 2)).toBe(false);

		dealer = 2;
		actions = 0;
		expect(shouldGiveAction(dealer, actions, players, 0)).toBe(true);
		expect(shouldGiveAction(dealer, actions, players, 1)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 2)).toBe(false);
		actions = 1;
		expect(shouldGiveAction(dealer, actions, players, 0)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 1)).toBe(true);
		expect(shouldGiveAction(dealer, actions, players, 2)).toBe(false);
		actions = 2;
		expect(shouldGiveAction(dealer, actions, players, 0)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 1)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 2)).toBe(true);
	});
	test("Should calculate actions correctly for 4 players", () => {
		const players = 4;
		let dealer = 0;
		let actions = 0;
		expect(shouldGiveAction(dealer, actions, players, 0)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 1)).toBe(true);
		expect(shouldGiveAction(dealer, actions, players, 2)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 3)).toBe(false);
		actions = 1;
		expect(shouldGiveAction(dealer, actions, players, 0)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 1)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 2)).toBe(true);
		expect(shouldGiveAction(dealer, actions, players, 3)).toBe(false);
		actions = 2;
		expect(shouldGiveAction(dealer, actions, players, 0)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 1)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 2)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 3)).toBe(true);

		dealer = 1;
		actions = 0;
		expect(shouldGiveAction(dealer, actions, players, 0)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 1)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 2)).toBe(true);
		expect(shouldGiveAction(dealer, actions, players, 3)).toBe(false);
		actions = 1;
		expect(shouldGiveAction(dealer, actions, players, 0)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 1)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 2)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 3)).toBe(true);
		actions = 2;
		expect(shouldGiveAction(dealer, actions, players, 0)).toBe(true);
		expect(shouldGiveAction(dealer, actions, players, 1)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 2)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 3)).toBe(false);

		dealer = 2;
		actions = 0;
		expect(shouldGiveAction(dealer, actions, players, 0)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 1)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 2)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 3)).toBe(true);
		actions = 1;
		expect(shouldGiveAction(dealer, actions, players, 0)).toBe(true);
		expect(shouldGiveAction(dealer, actions, players, 1)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 2)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 3)).toBe(false);
		actions = 2;
		expect(shouldGiveAction(dealer, actions, players, 0)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 1)).toBe(true);
		expect(shouldGiveAction(dealer, actions, players, 2)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 3)).toBe(false);

		dealer = 3;
		actions = 0;
		expect(shouldGiveAction(dealer, actions, players, 0)).toBe(true);
		expect(shouldGiveAction(dealer, actions, players, 1)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 2)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 3)).toBe(false);
		actions = 1;
		expect(shouldGiveAction(dealer, actions, players, 0)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 1)).toBe(true);
		expect(shouldGiveAction(dealer, actions, players, 2)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 3)).toBe(false);
		actions = 2;
		expect(shouldGiveAction(dealer, actions, players, 0)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 1)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 2)).toBe(true);
		expect(shouldGiveAction(dealer, actions, players, 3)).toBe(false);
	});
	test("Should calculate actions correctly for 5 players", () => {
		const players = 5;
		let dealer = 0;
		let actions = 0;
		expect(shouldGiveAction(dealer, actions, players, 0)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 1)).toBe(true);
		expect(shouldGiveAction(dealer, actions, players, 2)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 3)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 4)).toBe(false);
		actions = 1;
		expect(shouldGiveAction(dealer, actions, players, 0)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 1)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 2)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 3)).toBe(true);
		expect(shouldGiveAction(dealer, actions, players, 4)).toBe(false);
		actions = 2;
		expect(shouldGiveAction(dealer, actions, players, 0)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 1)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 2)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 3)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 4)).toBe(true);

		dealer = 1;
		actions = 0;
		expect(shouldGiveAction(dealer, actions, players, 0)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 1)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 2)).toBe(true);
		expect(shouldGiveAction(dealer, actions, players, 3)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 4)).toBe(false);
		actions = 1;
		expect(shouldGiveAction(dealer, actions, players, 0)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 1)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 2)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 3)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 4)).toBe(true);
		actions = 2;
		expect(shouldGiveAction(dealer, actions, players, 0)).toBe(true);
		expect(shouldGiveAction(dealer, actions, players, 1)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 2)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 3)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 4)).toBe(false);

		dealer = 2;
		actions = 0;
		expect(shouldGiveAction(dealer, actions, players, 0)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 1)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 2)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 3)).toBe(true);
		expect(shouldGiveAction(dealer, actions, players, 4)).toBe(false);
		actions = 1;
		expect(shouldGiveAction(dealer, actions, players, 0)).toBe(true);
		expect(shouldGiveAction(dealer, actions, players, 1)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 2)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 3)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 4)).toBe(false);
		actions = 2;
		expect(shouldGiveAction(dealer, actions, players, 0)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 1)).toBe(true);
		expect(shouldGiveAction(dealer, actions, players, 2)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 3)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 4)).toBe(false);

		dealer = 3;
		actions = 0;
		expect(shouldGiveAction(dealer, actions, players, 0)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 1)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 2)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 3)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 4)).toBe(true);
		actions = 1;
		expect(shouldGiveAction(dealer, actions, players, 0)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 1)).toBe(true);
		expect(shouldGiveAction(dealer, actions, players, 2)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 3)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 4)).toBe(false);
		actions = 2;
		expect(shouldGiveAction(dealer, actions, players, 0)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 1)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 2)).toBe(true);
		expect(shouldGiveAction(dealer, actions, players, 3)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 4)).toBe(false);

		dealer = 4;
		actions = 0;
		expect(shouldGiveAction(dealer, actions, players, 0)).toBe(true);
		expect(shouldGiveAction(dealer, actions, players, 1)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 2)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 3)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 4)).toBe(false);
		actions = 1;
		expect(shouldGiveAction(dealer, actions, players, 0)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 1)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 2)).toBe(true);
		expect(shouldGiveAction(dealer, actions, players, 3)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 4)).toBe(false);
		actions = 2;
		expect(shouldGiveAction(dealer, actions, players, 0)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 1)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 2)).toBe(false);
		expect(shouldGiveAction(dealer, actions, players, 3)).toBe(true);
		expect(shouldGiveAction(dealer, actions, players, 4)).toBe(false);
	});
});
